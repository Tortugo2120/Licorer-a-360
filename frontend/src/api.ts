/**
 * This file is auto-generated by the openapi zod client script.
 * DO NOT EDIT THIS FILE MANUALLY.
 */

const apiUrl = "http://localhost:8000";
import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

// Types
export type HTTPValidationError = Partial<{
  detail: Array<ValidationError>;
}>;
export type ValidationError = {
  loc: Array<(string | number) | Array<string | number>>;
  msg: string;
  type: string;
};
export type ProductoRead = {
  id: number;
  nombre: string;
  descripcion: string;
  categoria?:
    | ((CategoriaRead | null) | Array<CategoriaRead | null>)
    | undefined;
};
export type CategoriaRead = {
  id: number;
  nombre: string;
};
export type VarianteRead = {
  id: number;
  imagen: string;
  precio: number;
  stock: number;
  cantidad: number;
  producto?: ((ProductoRead | null) | Array<ProductoRead | null>) | undefined;
};

// Schemas
const CategoriaRead: z.ZodType<CategoriaRead> = z
  .object({ id: z.number().int(), nombre: z.string() })
  .strict();

const ProductoRead: z.ZodType<ProductoRead> = z
  .object({
    id: z.number().int(),
    nombre: z.string(),
    descripcion: z.string(),
    categoria: z.union([CategoriaRead, z.null()]).optional(),
  })
  .strict();

const Producto = z
  .object({
    id: z.union([z.number(), z.null()]).optional(),
    nombre: z.string(),
    descripcion: z.string(),
    id_categoria: z.union([z.number(), z.null()]).optional(),
  })
  .strict();
export type Producto = z.infer<typeof Producto>;

const ValidationError: z.ZodType<ValidationError> = z
  .object({
    loc: z.array(z.union([z.string(), z.number()])),
    msg: z.string(),
    type: z.string(),
  })
  .strict();

const HTTPValidationError: z.ZodType<HTTPValidationError> = z
  .object({ detail: z.array(ValidationError) })
  .partial()
  .strict();

const Categoria = z
  .object({
    id: z.union([z.number(), z.null()]).optional(),
    nombre: z.string(),
  })
  .strict();
export type Categoria = z.infer<typeof Categoria>;

const VarianteRead: z.ZodType<VarianteRead> = z
  .object({
    id: z.number().int(),
    imagen: z.string(),
    precio: z.number(),
    stock: z.number().int(),
    cantidad: z.number().int(),
    producto: z.union([ProductoRead, z.null()]).optional(),
  })
  .strict();

const Variante = z
  .object({
    id: z.union([z.number(), z.null()]),
    precio: z.number(),
    imagen: z.string(),
    stock: z.number().int(),
    cantidad: z.number().int(),
    id_producto: z.union([z.number(), z.null()]).optional(),
  })
  .strict();
export type Variante = z.infer<typeof Variante>;

const Compra = z
  .object({
    id: z.union([z.number(), z.null()]).optional(),
    fecha: z.string(),
    total: z.number(),
  })
  .strict();
export type Compra = z.infer<typeof Compra>;

const DetalleCompra = z
  .object({
    id: z.union([z.number(), z.null()]).optional(),
    cantidad: z.number().int(),
    subtotal: z.number(),
    id_compra: z.union([z.number(), z.null()]).optional(),
    id_variante: z.union([z.number(), z.null()]).optional(),
  })
  .strict();
export type DetalleCompra = z.infer<typeof DetalleCompra>;

export const schemas = {
  CategoriaRead,
  ProductoRead,
  Producto,
  ValidationError,
  HTTPValidationError,
  Categoria,
  VarianteRead,
  Variante,
  Compra,
  DetalleCompra,
};

// Apis
const defaultEndpoints = makeApi([
  {
    method: "get",
    path: "/productos",
    alias: "getProductosProductosGet",
    requestFormat: "json",
    response: z.array(ProductoRead),
  },
  {
    method: "post",
    path: "/productos",
    alias: "addProductoProductosPost",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Producto,
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "get",
    path: "/productos/:producto_id",
    alias: "getProductoProductos_productoId_get",
    requestFormat: "json",
    parameters: [
      {
        name: "producto_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "put",
    path: "/productos/:producto_id",
    alias: "updateProductoProductos_productoId_put",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Producto,
      },
      {
        name: "producto_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "delete",
    path: "/productos/:producto_id",
    alias: "deleteProductoProductos_productoId_delete",
    requestFormat: "json",
    parameters: [
      {
        name: "producto_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "get",
    path: "/categorias",
    alias: "getCategoriaCategoriasGet",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/categorias",
    alias: "addCategoriaCategoriasPost",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Categoria,
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "put",
    path: "/categorias/:categoria_id",
    alias: "updateCategoriaCategorias_categoriaId_put",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Categoria,
      },
      {
        name: "categoria_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "delete",
    path: "/categorias/:categoria_id",
    alias: "deleteCategoriaCategorias_categoriaId_delete",
    requestFormat: "json",
    parameters: [
      {
        name: "categoria_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "get",
    path: "/variantes",
    alias: "getVariantesVariantesGet",
    requestFormat: "json",
    response: z.array(VarianteRead),
  },
  {
    method: "post",
    path: "/variantes",
    alias: "addVarianteVariantesPost",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Variante,
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "put",
    path: "/variantes/:variante_id",
    alias: "updateVarianteVariantes_varianteId_put",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Variante,
      },
      {
        name: "variante_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "delete",
    path: "/variantes/:variante_id",
    alias: "deleteVarianteVariantes_varianteId_delete",
    requestFormat: "json",
    parameters: [
      {
        name: "variante_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "get",
    path: "/compras",
    alias: "getComprasComprasGet",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/compras",
    alias: "addComprasComprasPost",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Compra,
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "put",
    path: "/compras/:compra_id",
    alias: "updateCompraCompras_compraId_put",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Compra,
      },
      {
        name: "compra_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "delete",
    path: "/compras/:compra_id",
    alias: "deleteCompraCompras_compraId_delete",
    requestFormat: "json",
    parameters: [
      {
        name: "compra_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "get",
    path: "/detalle_compras",
    alias: "getDetalleComprasDetalleComprasGet",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/detalle_compras",
    alias: "addDetalleComprasDetalleComprasPost",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: DetalleCompra,
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "put",
    path: "/detalle_compras/:detalle_id",
    alias: "updateDetalleCompraDetalleCompras_detalleId_put",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: DetalleCompra,
      },
      {
        name: "detalle_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "delete",
    path: "/detalle_compras/:detalle_id",
    alias: "deleteDetalleCompraDetalleCompras_detalleId_delete",
    requestFormat: "json",
    parameters: [
      {
        name: "detalle_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
]);
export const defaultApi = new Zodios(apiUrl, defaultEndpoints);
